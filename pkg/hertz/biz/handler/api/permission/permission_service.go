// Code generated by hertz generator.

package permission

import (
	"context"
	"encoding/json"
	"files/pkg/hertz/biz/handler/handle_func"
	permission "files/pkg/hertz/biz/model/api/permission"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"k8s.io/klog/v2"
)

// GetPermissionMethod .
// @router /api/permission/*path [GET]
func GetPermissionMethod(ctx context.Context, c *app.RequestContext) {
	resp := new(permission.GetPermissionResp)
	respBytes := handle_func.MonkeyHandle(ctx, c, nil, handle_func.PermissionGetHandler, "/api/permission")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PutPermissionMethod .
// @router /api/permission/*path [PUT]
func PutPermissionMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req permission.PutPermissionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(permission.PutPermissionResp)
	respBytes := handle_func.MonkeyHandle(ctx, c, req, handle_func.PermissionPutHandler, "/api/permission")
	if respBytes != nil {
		if err = json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

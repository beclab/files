// Code generated by hertz generator.

package external

import (
	"context"
	"encoding/json"
	"files/pkg/hertz/biz/handler/handle_func"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"k8s.io/klog/v2"

	external "files/pkg/hertz/biz/model/api/external"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MountedMethod .
// @router /api/mounted/*node [GET]
func MountedMethod(ctx context.Context, c *app.RequestContext) {
	resp := new(external.MountedResp)
	respBytes := handle_func.MonkeyHandle(ctx, c, nil, handle_func.ResourceMountedHandler, "/api/mounted")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// MountMethod .
// @router /api/mount/*node [POST]
func MountMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.MountReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(external.MountResp)
	respBytes := handle_func.MonkeyHandle(ctx, c, req, handle_func.ResourceMountHandler, "/api/mount")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// UnmountMethod .
// @router /api/unmount/*path [POST]
func UnmountMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.UnmountReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(external.UnmountResp)
	respBytes := handle_func.MonkeyHandle(ctx, c, req, handle_func.ResourceUnmountHandler, "/api/unmount")
	if respBytes != nil {
		if err = json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// GetSmbHistoryMethod .
// @router /api/smb_history/*node [GET]
func GetSmbHistoryMethod(ctx context.Context, c *app.RequestContext) {
	resp := new(external.GetSmbHistoryResp)
	respBytes := handle_func.MonkeyHandle(ctx, c, nil, handle_func.SmbHistoryGetHandler, "/api/smb_history")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PutSmbHistoryMethod .
// @router /api/smb_history/*node [PUT]
func PutSmbHistoryMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.PutSmbHistoryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := handle_func.MonkeyHandle(ctx, c, req, handle_func.SmbHistoryPutHandler, "/api/smb_history")
	if resp != nil {
		c.JSON(consts.StatusOK, string(resp))
	}
}

// DeleteSmbHistoryMethod .
// @router /api/smb_history/*node [DELETE]
func DeleteSmbHistoryMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.DeleteSmbHistoryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := handle_func.MonkeyHandle(ctx, c, req, handle_func.SmbHistoryDeleteHandler, "/api/smb_history")
	if resp != nil {
		c.JSON(consts.StatusOK, string(resp))
	}
}

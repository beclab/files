// Code generated by hertz generator.

package external

import (
	"context"
	"files/pkg/hertz/biz/handler"
	external "files/pkg/hertz/biz/model/api/external"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MountedMethod .
// @router /api/mounted/*node [GET]
func MountedMethod(ctx context.Context, c *app.RequestContext) {
	resp := new(external.MountedResp)
	handler.CommonConvert(c, handler.MonkeyHandle(handler.ResourceMountedHandler, "/api/mounted"), resp, false)
}

// MountMethod .
// @router /api/mount/*node [POST]
func MountMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.MountReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(external.MountResp)
	handler.CommonConvert(c, handler.MonkeyHandle(handler.ResourceMountHandler, "/api/mount"), resp, false)
}

// UnmountMethod .
// @router /api/unmount/*path [POST]
func UnmountMethod(ctx context.Context, c *app.RequestContext) {
	resp := new(external.UnmountResp)
	handler.CommonConvert(c, handler.MonkeyHandle(handler.ResourceUnmountHandler, "/api/unmount"), resp, false)
}

// GetSmbHistoryMethod .
// @router /api/smb_history/*node [GET]
func GetSmbHistoryMethod(ctx context.Context, c *app.RequestContext) {
	resp := new(external.GetSmbHistoryResp)
	handler.CommonConvert(c, handler.MonkeyHandle(handler.SmbHistoryGetHandler, "/api/smb_history"), resp, true)
}

// PutSmbHistoryMethod .
// @router /api/smb_history/*node [PUT]
func PutSmbHistoryMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.PutSmbHistoryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(external.PutSmbHistoryResp)
	handler.CommonConvert(c, handler.MonkeyHandle(handler.SmbHistoryPutHandler, "/api/smb_history"), resp, true)
}

// DeleteSmbHistoryMethod .
// @router /api/smb_history/*node [DELETE]
func DeleteSmbHistoryMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req external.DeleteSmbHistoryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(external.DeleteSmbHistoryResp)
	handler.CommonConvert(c, handler.MonkeyHandle(handler.SmbHistoryDeleteHandler, "/api/smb_history"), resp, true)
}

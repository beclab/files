// Code generated by hertz generator.

package repos

import (
	"context"
	"files/pkg/hertz/biz/handler"
	repos "files/pkg/hertz/biz/model/api/repos"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetReposMethod .
// @router /api/repos [GET]
func GetReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.GetReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.GetReposResp)
	handler.CommonConvert(c, handler.CommonHandle(handler.ReposGetHandler), resp, false)
}

// PostReposMethod .
// @router /api/repos [POST]
func PostReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.PostReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.PostReposResp)
	handler.CommonConvert(c, handler.CommonHandle(handler.CreateRepoHandler), resp, false)
}

// DeleteReposMethod .
// @router /api/repos [DELETE]
func DeleteReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.DeleteReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.DeleteReposResp)
	handler.CommonConvert(c, handler.CommonHandle(handler.DeleteRepoHandler), resp, false)
}

// PatchReposMethod .
// @router /api/repos [PATCH]
func PatchReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.PatchReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.PatchReposResp)
	handler.CommonConvert(c, handler.CommonHandle(handler.RenameRepoHandler), resp, false)
}

// Code generated by hertz generator.

package repos

import (
	"context"
	"encoding/json"
	"files/pkg/hertz/biz/handler/handle_func"
	repos "files/pkg/hertz/biz/model/api/repos"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"k8s.io/klog/v2"
)

// GetReposMethod .
// @router /api/repos [GET]
func GetReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.GetReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.GetReposResp)
	respBytes := handle_func.CommonHandle(ctx, c, resp, handle_func.ReposGetHandler)
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PostReposMethod .
// @router /api/repos [POST]
func PostReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.PostReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.PostReposResp)
	respBytes := handle_func.CommonHandle(ctx, c, resp, handle_func.CreateRepoHandler)
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// DeleteReposMethod .
// @router /api/repos [DELETE]
func DeleteReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.DeleteReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.DeleteReposResp)
	respBytes := handle_func.CommonHandle(ctx, c, resp, handle_func.DeleteRepoHandler)
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PatchReposMethod .
// @router /api/repos [PATCH]
func PatchReposMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req repos.PatchReposReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(repos.PatchReposResp)
	respBytes := handle_func.CommonHandle(ctx, c, resp, handle_func.RenameRepoHandler)
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// Code generated by hertz generator.

package resources

import (
	"context"
	"files/pkg/hertz/biz/handler"
	"files/pkg/hertz/biz/handler/handle_func"
	resources "files/pkg/hertz/biz/model/api/resources"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"k8s.io/klog/v2"
)

// GetResourcesMethod .
// @router /api/resources [GET]
func GetResourcesMethod(ctx context.Context, c *app.RequestContext) {
	klog.Infof("~~~Debug log: path=%s", c.Param("path"))

	resp := new(resources.GetResourcesResp)
	handler.CommonConvert(c, handle_func.WrapperFilesResourcesArgs(handle_func.ListHandler, "/api/resources/"), resp, true)
}

// PostResourcesMethod .
// @router /api/resources/*path [POST]
func PostResourcesMethod(ctx context.Context, c *app.RequestContext) {
	klog.Infof("~~~Debug log: path=%s", c.Param("path"))

	resp := new(resources.PostResourcesResp)
	handler.CommonConvert(c, handle_func.WrapperFilesResourcesArgs(handle_func.CreateHandler, "/api/resources/"), resp, false)
}

// PatchResourcesMethod .
// @router /api/resources/*path [PATCH]
func PatchResourcesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resources.PatchResourcesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resources.PatchResourcesResp)
	handler.CommonConvert(c, handle_func.WrapperFilesResourcesArgs(handle_func.RenameHandler, "/api/resources/"), resp, false)
}

// PutResourcesMethod .
// @router /api/resources/*path [PUT]
func PutResourcesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resources.PutResourcesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resources.PutResourcesResp)
	handler.CommonConvert(c, handle_func.WrapperFilesEditArgs(handle_func.EditHandler, "/api/resources/"), resp, false)
}

// DeleteResourcesMethod .
// @router /api/resources/*path [DELETE]
func DeleteResourcesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resources.DeleteResourcesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resources.DeleteResourcesResp)
	handler.CommonConvert(c, handle_func.WrapperFilesDeleteArgs(handle_func.DeleteHandler, "/api/resources/"), resp, false)
}

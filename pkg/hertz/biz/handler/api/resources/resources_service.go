// Code generated by hertz generator.

package resources

import (
	"context"
	"encoding/json"
	"files/pkg/hertz/biz/handler/handle_func"
	resources "files/pkg/hertz/biz/model/api/resources"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"k8s.io/klog/v2"
)

// GetResourcesMethod .
// @router /api/resources [GET]
func GetResourcesMethod(ctx context.Context, c *app.RequestContext) {
	klog.Infof("~~~Debug log: path=%s", c.Param("path"))

	resp := new(map[string]interface{}) // different disk type with different responses
	respBytes := handle_func.FileHandle(ctx, c, nil, handle_func.ListHandler, "/api/resources")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PostResourcesMethod .
// @router /api/resources/*path [POST]
func PostResourcesMethod(ctx context.Context, c *app.RequestContext) {
	klog.Infof("~~~Debug log: path=%s", c.Param("path"))

	resp := new(resources.PostResourcesResp)
	respBytes := handle_func.FileHandle(ctx, c, nil, handle_func.CreateHandler, "/api/resources")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PatchResourcesMethod .
// @router /api/resources/*path [PATCH]
func PatchResourcesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resources.PatchResourcesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resources.PatchResourcesResp)
	respBytes := handle_func.FileHandle(ctx, c, req, handle_func.RenameHandler, "/api/resources")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// PutResourcesMethod .
// @router /api/resources/*path [PUT]
func PutResourcesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resources.PutResourcesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resources.PutResourcesResp)
	respBytes := handle_func.FileEditHandle(ctx, c, req, handle_func.EditHandler, "/api/resources")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// DeleteResourcesMethod .
// @router /api/resources/*path [DELETE]
func DeleteResourcesMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resources.DeleteResourcesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resources.DeleteResourcesResp)
	respBytes := handle_func.FileDeleteHandle(ctx, c, req, handle_func.DeleteHandler, "/api/resources")
	if respBytes != nil {
		if err := json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

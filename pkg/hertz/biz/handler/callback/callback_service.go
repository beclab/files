// Code generated by hertz generator.

package callback

import (
	"context"
	"files/pkg/drivers/sync/seahub"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"k8s.io/klog/v2"
	"strings"

	callback "files/pkg/hertz/biz/model/callback"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CallbackCreateMethod .
// @router /callback/create [POST]
func CallbackCreateMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req callback.CallbackCreateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": err.Error()})
		return
	}

	bflName := strings.TrimSpace(req.Name)
	if bflName != "" {
		newUsername := bflName + "@auth.local"
		klog.Infof("Try to create user for %s", newUsername)

		isNew, err := seahub.CreateUser(newUsername)
		if err != nil {
			klog.Infof("Error creating user: %v", err)
			c.AbortWithStatusJSON(consts.StatusInternalServerError, utils.H{"error": err.Error()})
			return
		}

		if isNew {
			repoId, err := seahub.CreateDefaultLibrary(newUsername)
			if err != nil {
				klog.Infof("Create default library for %s failed: %v", newUsername, err)
			} else {
				klog.Infof("Create default library %s for %s successfully!", repoId, newUsername)
			}
		}
	}

	resp := new(callback.CallbackCreateResp)
	c.JSON(consts.StatusOK, resp)
}

// CallbackDeleteMethod .
// @router /callback/delete [POST]
func CallbackDeleteMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req callback.CallbackDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": err.Error()})
		return
	}

	bflName := strings.TrimSpace(req.Name)
	username := bflName + "@auth.local"

	err = seahub.RemoveUser(username)
	if err != nil {
		c.AbortWithStatusJSON(consts.StatusInternalServerError, utils.H{"error": err.Error()})
		return
	}

	resp := new(callback.CallbackDeleteResp)
	c.JSON(consts.StatusOK, resp)
}

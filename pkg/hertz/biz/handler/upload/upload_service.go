// Code generated by hertz generator.

package upload

import (
	"context"
	"encoding/json"
	"files/pkg/hertz/biz/handler/handle_func"
	upload "files/pkg/hertz/biz/model/upload"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"k8s.io/klog/v2"
)

// UploadLinkMethod .
// @router /upload/upload_link [GET]
func UploadLinkMethod(ctx context.Context, c *app.RequestContext) {
	node := c.Param("node")
	klog.Infof("~~~Debug log: node = %s", node)

	var err error
	var req upload.UploadLinkReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := handle_func.FileUploadHandle(ctx, c, req, handle_func.FileUploadLinkHandler)
	if resp != nil {
		c.JSON(consts.StatusOK, string(resp))
	}
}

// UploadedBytesMethod .
// @router /upload/file_uploaded_bytes [GET]
func UploadedBytesMethod(ctx context.Context, c *app.RequestContext) {
	node := c.Param("node")
	klog.Infof("~~~Debug log: node = %s", node)

	var err error
	var req upload.UploadedBytesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(upload.UploadedBytesResp)
	respBytes := handle_func.FileUploadHandle(ctx, c, req, handle_func.FileUploadedBytesHandler)
	if respBytes != nil {
		if err = json.Unmarshal(respBytes, &resp); err != nil {
			klog.Errorf("Failed to unmarshal response body: %v", err)
			c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
			return
		}
		c.JSON(consts.StatusOK, resp)
	}
}

// UploadChunksMethod .
// @router /upload/upload-link/:uid [POST]
func UploadChunksMethod(ctx context.Context, c *app.RequestContext) {
	uid := c.Param("uid")
	klog.Infof("~~~Debug log: uid = %s", uid)

	var err error
	var req upload.UploadChunksReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	klog.Infof("~~~Debug log: req = %v", req)

	resp := new(upload.UploadChunksResp)
	respBytes := handle_func.FileUploadHandle(ctx, c, req, handle_func.FileUploadChunksHandler)

	if respBytes != nil {
		klog.Infof("req.ResumableChunksNumber=%d, req.ResumableTotalChunks=%d", req.ResumableChunkNumber, req.ResumableTotalChunks)
		if req.ResumableChunkNumber == req.ResumableTotalChunks {
			resp.Success = nil
			resp.Item = nil
			resp.Items = make([]*upload.UploadChunksFileItem, 0)
			if err = json.Unmarshal(respBytes, &resp.Items); err != nil {
				klog.Errorf("Failed to unmarshal response body for old version: %v", err)
				resp.Items = nil
				resp.Item = new(upload.UploadChunksFileItem)
				if err = json.Unmarshal(respBytes, resp.Item); err != nil {
					klog.Errorf("Failed to unmarshal response body for new version: %v", err)
					c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
					return
				}
			}
		} else {
			resp.Item = nil
			resp.Items = nil
			resp.Success = new(upload.UploadChunksSuccess)
			if err = json.Unmarshal(respBytes, &resp.Success); err != nil {
				klog.Errorf("Failed to unmarshal response body for old version: %v", err)
				c.AbortWithStatusJSON(consts.StatusBadRequest, utils.H{"error": "Failed to unmarshal response body"})
				return
			}
		}

		c.JSON(consts.StatusOK, handle_func.Coalesce(resp.Success, resp.Items, resp.Item))
	}
}
